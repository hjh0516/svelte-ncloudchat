var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { io } from "socket.io-client";
import CoreManager from "./CoreManager";
import Dispatcher from "./Dispatcher";
import { info } from "./logger";
import { getChannel, getChannels, getMessage, getMessages, getSubscription, getSubscriptions, getMembers, getMemberBlocks, getFriendships, unreadCount, } from "./queries";
import { login, createChannel, updateChannel, deleteChannel, translate, upload, createSubscription, deleteSubscription, updateSubscription, addChannelMembers, removeChannelMembers, requestFriend, acceptFriend, rejectFriend, removeFriend, createMemberBlock, deleteMemberBlock, } from "./mutations";
var NCloudChat = /** @class */ (function () {
    function NCloudChat() {
        this.socket = null;
        this.connected = false;
        this.connectedCount = 0;
        this.dp = new Dispatcher();
    }
    NCloudChat.prototype.clear = function () { };
    NCloudChat.prototype.initialize = function (projectId) {
        CoreManager.set("PROJECT_ID", projectId);
        CoreManager.set("USER", {
            id: "",
            name: "",
            image: ""
        });
    };
    NCloudChat.prototype.getLang = function () {
        return navigator.language;
    };
    NCloudChat.prototype.getUser = function () {
        return CoreManager.get("USER");
    };
    NCloudChat.prototype.setServerUrl = function (url) {
        if (!/^[hHtTpP]{4}(s)?(:\/\/)[a-zA-Z0-9\.\/-:]+/.test(url)) {
            throw Error("invalied url : (ex)http://domain.com, https://domain.com");
            return;
        }
        if (url.length > 1 && url.substring(url.length - 1) === '/') {
            url = url.substring(0, url.length - 1);
        }
        return CoreManager.set("SERVER_URL", url);
    };
    NCloudChat.prototype.setSocketUrl = function (url) {
        CoreManager.set("SOCKET_URL", url);
    };
    NCloudChat.prototype.setProjectId = function (projectId) {
        return CoreManager.set("PROJECT_ID", projectId);
    };
    NCloudChat.prototype.setToken = function (token) {
        return CoreManager.set("TOKEN", token);
    };
    NCloudChat.prototype.setUser = function (user) {
        CoreManager.set("USER", user);
    };
    NCloudChat.prototype.connect = function (user, userToken) {
        if (userToken === void 0) { userToken = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var url, project_id, image, name, lang, e_1, options;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.disconnect()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        url = CoreManager.get("SOCKET_URL") + '/cloudchat';
                        project_id = CoreManager.get("PROJECT_ID");
                        if (!project_id) {
                            throw Error("Project ID not found");
                        }
                        // const user = CoreManager.get("USER");
                        // if (!user.id && user.id) user_id = user.id;
                        if (!user.id) {
                            throw Error("UserID not found");
                        }
                        image = user.profile;
                        name = user.name;
                        lang = this.getLang();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, login(user.id, name, image, userToken)];
                    case 4:
                        userToken = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        throw e_1;
                    case 6:
                        if (!userToken) {
                            throw Error("Token is not found");
                        }
                        CoreManager.set("TOKEN", userToken);
                        options = {
                            transports: ["websocket"],
                            reconnection: true,
                            reconnectionAttempts: 10,
                            reconnectionDelay: 2000,
                            reconnectionDelayMax: 2000 * 100,
                            randomizationFactor: 0.5,
                            query: {
                                project_id: project_id,
                                user_id: user.id,
                                lang: lang,
                                image: image,
                                name: name,
                                token: userToken
                            }
                        };
                        this.socket = io(url, options);
                        this.socket.on("connect", function (data) {
                            _this.connectedCount++;
                            _this.connected = true;
                            info("Connected to " + url + " with id: " + _this.socket.id);
                            _this.dp.dispatch("onConnected", data);
                        });
                        this.socket.on("unauthorized", function (data) { });
                        this.socket.on("disconnect", function (reason) {
                            _this.connected = false;
                            info("Disconnected to " + url + " with id: " + _this.socket.id);
                            _this.dp.dispatch("onDisconnected", reason);
                        });
                        this.socket.on("message", function (payload) {
                            var message = JSON.parse(payload);
                            _this.dp.dispatch("onMessageReceived", message.channel_id, message);
                        });
                        this.socket.on("event", function (payload) {
                            var message = JSON.parse(payload);
                            _this.dp.dispatch("onEventReceived", message.channel_id, message);
                        });
                        this.socket.on("start typing", function (payload) {
                            var data = JSON.parse(payload);
                            _this.dp.dispatch("onStartTyping", data);
                        });
                        this.socket.on("stop typing", function (payload) {
                            var data = JSON.parse(payload);
                            _this.dp.dispatch("onStopTyping", data);
                        });
                        this.socket.on("member added", function (payload) {
                            var data = typeof payload === "string" ? JSON.parse(payload) : payload;
                            _this.dp.dispatch("onMemberAdded", data);
                        });
                        this.socket.on("member removed", function (payload) {
                            var data = JSON.parse(payload);
                            _this.dp.dispatch("onMemberRemoved", data);
                        });
                        this.socket.on("member updated", function (payload) {
                            var data = JSON.parse(payload);
                            _this.dp.dispatch("onMemberUpdated", data);
                        });
                        this.socket.on("message deleted", function (payload) {
                            var data = JSON.parse(payload);
                            _this.dp.dispatch("onMessageDeleted", data);
                        });
                        this.socket.on("message updated", function (payload) {
                            var data = JSON.parse(payload);
                            _this.dp.dispatch("onMessageUpdated", data);
                        });
                        this.socket.on("user banned", function (payload) {
                            var data = JSON.parse(payload);
                            _this.dp.dispatch("onUserBanned", data);
                        });
                        this.socket.on("user deleted", function (payload) {
                            var data = JSON.parse(payload);
                            _this.dp.dispatch("onUserDeleted", data);
                        });
                        this.socket.on("user updated", function (payload) {
                            var data = JSON.parse(payload);
                            _this.dp.dispatch("onUserUpdated", data);
                        });
                        this.socket.on("result", function (payload) {
                            var message = JSON.parse(payload);
                            _this.dp.dispatch("onResult", message);
                        });
                        this.socket.on("error", function (payload) {
                            var message = JSON.parse(payload);
                            _this.dp.dispatch("onErrorReceived", message);
                        });
                        return [2 /*return*/, user];
                }
            });
        });
    };
    NCloudChat.prototype.mute = function (channel) {
        return __awaiter(this, void 0, void 0, function () {
            var subscription, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, updateSubscription(channel, null, JSON.stringify({ mute: true }))];
                    case 2:
                        subscription = _a.sent();
                        if (subscription)
                            subscription.id = this.ObjectId(subscription.id);
                        return [2 /*return*/, subscription];
                    case 3:
                        e_2 = _a.sent();
                        throw e_2;
                    case 4: return [2 /*return*/, null];
                }
            });
        });
    };
    NCloudChat.prototype.unmute = function (channel) {
        return __awaiter(this, void 0, void 0, function () {
            var subscription, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, updateSubscription(channel, null, JSON.stringify({ mute: false }))];
                    case 2:
                        subscription = _a.sent();
                        if (subscription)
                            subscription.id = this.ObjectId(subscription.id);
                        return [2 /*return*/, subscription];
                    case 3:
                        e_3 = _a.sent();
                        throw e_3;
                    case 4: return [2 /*return*/, null];
                }
            });
        });
    };
    NCloudChat.prototype.subscribe = function (channel, option) {
        if (option === void 0) { option = null; }
        return __awaiter(this, void 0, void 0, function () {
            var subscription, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, createSubscription(channel, JSON.stringify(option))];
                    case 2:
                        subscription = _a.sent();
                        if (subscription)
                            subscription.id = this.ObjectId(subscription.id);
                        return [2 /*return*/, subscription];
                    case 3:
                        e_4 = _a.sent();
                        throw e_4;
                    case 4: return [2 /*return*/, null];
                }
            });
        });
    };
    NCloudChat.prototype.unsubscribe = function (channel) {
        return __awaiter(this, void 0, void 0, function () {
            var subscription, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, deleteSubscription(channel)];
                    case 2:
                        subscription = _a.sent();
                        return [2 /*return*/, subscription];
                    case 3:
                        e_5 = _a.sent();
                        throw e_5;
                    case 4: return [2 /*return*/, null];
                }
            });
        });
    };
    NCloudChat.prototype.translateMessage = function (channelId, source, target, message) {
        return __awaiter(this, void 0, void 0, function () {
            var user, result, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        user = CoreManager.get("USER");
                        return [4 /*yield*/, translate(channelId, source, target, message)];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, result];
                    case 3:
                        e_6 = _a.sent();
                        throw Error(e_6.message);
                    case 4: return [2 /*return*/, null];
                }
            });
        });
    };
    NCloudChat.prototype.sendMessage = function (channel, opt) {
        return __awaiter(this, void 0, void 0, function () {
            var user, data;
            return __generator(this, function (_a) {
                if (!this.isConnected()) {
                    throw Error("You are not connected.");
                }
                // 채널 아이디가 존재하지 않을 경우 오류
                if (!channel) {
                    throw Error("Channel ID is not found");
                }
                if (!opt.type)
                    opt.type = "text";
                if (!opt.message) {
                    throw Error("Message is NULL");
                }
                user = CoreManager.get("USER");
                try {
                    data = __assign({ channelId: channel, user: user }, opt);
                    this.socket.emit("message", data);
                    return [2 /*return*/, data];
                }
                catch (e) {
                    return [2 /*return*/, false];
                }
                return [2 /*return*/];
            });
        });
    };
    NCloudChat.prototype.sendImage = function (channelId, file) {
        return __awaiter(this, void 0, void 0, function () {
            var user, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        user = CoreManager.get("USER");
                        return [4 /*yield*/, upload(channelId, file)];
                    case 1:
                        result = _a.sent();
                        if (!result.status)
                            throw Error(result.message);
                        return [2 /*return*/, result];
                }
            });
        });
    };
    NCloudChat.prototype.updateMessage = function (channel, message_id, message) {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    NCloudChat.prototype.deleteMessage = function (channel, message_id) {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    NCloudChat.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.isConnected())
                    return [2 /*return*/];
                this.socket.disconnect();
                return [2 /*return*/];
            });
        });
    };
    NCloudChat.prototype.isConnected = function () {
        return this.connected ? true : false;
    };
    NCloudChat.prototype.bind = function (id, fn) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.dp.on(id, fn);
                return [2 /*return*/];
            });
        });
    };
    NCloudChat.prototype.unbind = function (id, fn) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.dp.off(id, fn);
                return [2 /*return*/];
            });
        });
    };
    NCloudChat.prototype.unbindall = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.dp.offall(id);
                return [2 /*return*/];
            });
        });
    };
    NCloudChat.prototype.ObjectId = function (id) {
        if (!id)
            return "";
        return atob(id).split(":")[1];
    };
    NCloudChat.prototype.getFriendships = function (filter, sort, option) {
        if (sort === void 0) { sort = {}; }
        if (option === void 0) { option = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var entries, friends, e_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, getFriendships(JSON.stringify(filter), JSON.stringify(sort), JSON.stringify(option))];
                    case 2:
                        entries = _a.sent();
                        if (entries) {
                            friends = entries.map(function (item) {
                                return __assign(__assign({}, item.node), { id: (item.node.id) });
                            });
                            return [2 /*return*/, friends];
                        }
                        return [2 /*return*/, entries];
                    case 3:
                        e_7 = _a.sent();
                        throw e_7;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.getMemberBlocks = function (filter, sort, option) {
        if (sort === void 0) { sort = {}; }
        if (option === void 0) { option = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var entries, members, e_8;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, getMemberBlocks(JSON.stringify(filter), JSON.stringify(sort), JSON.stringify(option))];
                    case 2:
                        entries = _a.sent();
                        if (entries) {
                            members = entries.map(function (item) {
                                return __assign(__assign({}, item.node), { id: _this.ObjectId(item.node.id) });
                            });
                            return [2 /*return*/, members];
                        }
                        return [2 /*return*/, entries];
                    case 3:
                        e_8 = _a.sent();
                        throw e_8;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.getMembers = function (filter, sort, option) {
        if (sort === void 0) { sort = {}; }
        if (option === void 0) { option = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var entries, members, e_9;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, getMembers(JSON.stringify(filter), JSON.stringify(sort), JSON.stringify(option))];
                    case 2:
                        entries = _a.sent();
                        if (entries) {
                            members = entries.map(function (item) {
                                return __assign(__assign({}, item.node), { id: _this.ObjectId(item.node.id) });
                            });
                            return [2 /*return*/, members];
                        }
                        return [2 /*return*/, entries];
                    case 3:
                        e_9 = _a.sent();
                        throw e_9;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.getChannels = function (filter, sort, option) {
        if (sort === void 0) { sort = {}; }
        if (option === void 0) { option = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var entries, channels, e_10;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, getChannels(JSON.stringify(filter), JSON.stringify(sort), JSON.stringify(option))];
                    case 2:
                        entries = _a.sent();
                        if (entries) {
                            channels = entries.map(function (item) {
                                return __assign(__assign({}, item.node), { id: _this.ObjectId(item.node.id) });
                            });
                            return [2 /*return*/, channels];
                        }
                        return [2 /*return*/, entries];
                    case 3:
                        e_10 = _a.sent();
                        throw e_10;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.requestFriend = function (friendId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, requestFriend(friendId)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_11 = _a.sent();
                        throw e_11;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.acceptFriend = function (friendId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, acceptFriend(friendId)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_12 = _a.sent();
                        throw e_12;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.rejectFriend = function (friendId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, rejectFriend(friendId)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_13 = _a.sent();
                        throw e_13;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.removeFriend = function (friendId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, removeFriend(friendId)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_14 = _a.sent();
                        throw e_14;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.countUnread = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, unreadCount(channelId)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_15 = _a.sent();
                        throw e_15;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.getSubscription = function (channelId, id) {
        return __awaiter(this, void 0, void 0, function () {
            var e_16;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, getSubscription(channelId, id)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_16 = _a.sent();
                        throw e_16;
                    case 4: return [2 /*return*/, null];
                }
            });
        });
    };
    NCloudChat.prototype.getChannel = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_17;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, getChannel(channelId)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_17 = _a.sent();
                        throw e_17;
                    case 4: return [2 /*return*/, null];
                }
            });
        });
    };
    NCloudChat.prototype.getMessage = function (channelId, messageId) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, e_18;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, getMessage(channelId, messageId)];
                    case 2:
                        entry = _a.sent();
                        if (entry) {
                            entry.id = this.ObjectId(entry.id);
                            return [2 /*return*/, entry];
                        }
                        return [2 /*return*/, null];
                    case 3:
                        e_18 = _a.sent();
                        throw e_18;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.getMessages = function (filter, sort, option) {
        return __awaiter(this, void 0, void 0, function () {
            var entries, messages, e_19;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, getMessages(JSON.stringify(filter), JSON.stringify(sort), JSON.stringify(option))];
                    case 2:
                        entries = _a.sent();
                        if (entries) {
                            messages = entries.map(function (item) {
                                return __assign(__assign({}, item.node), { id: _this.ObjectId(item.node.id) });
                            });
                            return [2 /*return*/, messages];
                        }
                        return [2 /*return*/, entries];
                    case 3:
                        e_19 = _a.sent();
                        throw e_19;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.getSubscriptions = function (filter, sort, option) {
        return __awaiter(this, void 0, void 0, function () {
            var entries, subscribes, e_20;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, getSubscriptions(JSON.stringify(filter), JSON.stringify(sort), JSON.stringify(option))];
                    case 2:
                        entries = _a.sent();
                        if (entries) {
                            subscribes = entries.map(function (item) {
                                return __assign(__assign({}, item.node), { id: _this.ObjectId(item.node.id) });
                            });
                            return [2 /*return*/, subscribes];
                        }
                        return [2 /*return*/, entries];
                    case 3:
                        e_20 = _a.sent();
                        throw e_20;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.createChannel = function (channel) {
        return __awaiter(this, void 0, void 0, function () {
            var e_21;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, createChannel(channel)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_21 = _a.sent();
                        throw e_21;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.updateChannel = function (channelId, channel) {
        return __awaiter(this, void 0, void 0, function () {
            var e_22;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, updateChannel(channelId, channel)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_22 = _a.sent();
                        throw e_22;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.deleteChannel = function (channelId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_23;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, deleteChannel(channelId)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_23 = _a.sent();
                        throw e_23;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.markRead = function (channelId, mark, option) {
        if (option === void 0) { option = null; }
        return __awaiter(this, void 0, void 0, function () {
            var e_24;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, updateSubscription(channelId, mark, JSON.stringify(option))];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_24 = _a.sent();
                        throw e_24;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.addMembers = function (channelId, memberIds, options) {
        return __awaiter(this, void 0, void 0, function () {
            var input, e_25;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        input = {
                            members: memberIds
                        };
                        return [4 /*yield*/, addChannelMembers(channelId, memberIds, options)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_25 = _a.sent();
                        throw e_25;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.removeMembers = function (channelId, memberIds, options) {
        return __awaiter(this, void 0, void 0, function () {
            var e_26;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, removeChannelMembers(channelId, memberIds)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_26 = _a.sent();
                        throw e_26;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.startTyping = function (channelId, threadId) {
        if (threadId === void 0) { threadId = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                if (!this.isConnected()) {
                    throw Error("You are not connected.");
                }
                try {
                    data = {
                        channelId: channelId,
                        threadId: threadId
                    };
                    return [2 /*return*/, this.socket.emit("start typing", data)];
                }
                catch (e) {
                    throw e;
                }
                return [2 /*return*/];
            });
        });
    };
    NCloudChat.prototype.stopTyping = function (channelId, threadId) {
        if (threadId === void 0) { threadId = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                if (!this.isConnected()) {
                    throw Error("You are not connected.");
                }
                try {
                    data = {
                        channelId: channelId,
                        threadId: threadId
                    };
                    return [2 /*return*/, this.socket.emit("stop typing", data)];
                }
                catch (e) {
                    throw e;
                }
                return [2 /*return*/];
            });
        });
    };
    NCloudChat.prototype.banUser = function (channelId, memberId, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var e_27;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, createMemberBlock(channelId, memberId, JSON.stringify(options))];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_27 = _a.sent();
                        throw e_27;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NCloudChat.prototype.unbanUser = function (channelId, memberId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_28;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected()) {
                            throw Error("You are not connected.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, deleteMemberBlock(channelId, memberId)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_28 = _a.sent();
                        throw e_28;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return NCloudChat;
}());
export default NCloudChat;
//# sourceMappingURL=CloudChat.js.map