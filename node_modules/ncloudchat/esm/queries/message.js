var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import CoreManager from "../CoreManager";
export var getMessages = function (filter, sort, option) { return __awaiter(void 0, void 0, void 0, function () {
    var token, projectId, endpoint, queries;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                token = CoreManager.get("TOKEN");
                if (!token)
                    return [2 /*return*/, null];
                projectId = CoreManager.get("PROJECT_ID");
                if (!projectId)
                    return [2 /*return*/, null];
                endpoint = CoreManager.get("SERVER_URL") + "/graphql";
                queries = "\n          query messages ($projectId: String!, $filter: String!, $option: String, $sort: String ) {\n            messages(projectId: $projectId, filter: $filter, option:$option, sort:$sort) {\n                totalCount\n                edges {\n                    node {\n                        id\n                        message_id\n                        channel_id\n                        sort_id\n                        message_type\n                        sender {\n                            id\n                            name\n                            profile\n                        }\n                        admin {\n                          id\n                          name\n                        }\n                        mentions\n                        mentions_everyone\n                        content\n                        sended_at\n                        created_at\n                    }\n                }\n            }\n        }\n    ";
                return [4 /*yield*/, fetch(endpoint, {
                        method: "POST",
                        headers: {
                            Authorization: "Bearer " + token,
                            'X-PROJECT-ID': projectId,
                            "Content-Type": "application/json",
                            Accept: "application/json"
                        },
                        body: JSON.stringify({
                            query: queries,
                            variables: {
                                projectId: projectId,
                                filter: filter,
                                sort: sort,
                                option: option
                            }
                        })
                    })
                        .then(function (res) { return res.json(); })
                        .then(function (data) {
                        if (data.errors)
                            throw data.errors[0];
                        if (data.code)
                            throw data;
                        if (!data || !data.data.messages)
                            return [];
                        return data.data.messages.edges;
                    })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
export var getMessage = function (channelId, messageId) { return __awaiter(void 0, void 0, void 0, function () {
    var token, projectId, endpoint, queries;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                token = CoreManager.get("TOKEN");
                if (!token)
                    return [2 /*return*/, null];
                projectId = CoreManager.get("PROJECT_ID");
                if (!projectId)
                    return [2 /*return*/, null];
                endpoint = CoreManager.get("SERVER_URL") + "/graphql";
                queries = "\n      query message ($projectId: String!, $channelId: String!, $id: ID!) { \n        message(projectId: $projectId, channelId:$channelId, id:$id) {    \n            id\n          message_id\n          channel_id\n          sort_id\n          message_type\n          sender {\n              id\n              name\n              profile\n          }\n          admin {\n              id\n              name\n          }\n          mentions\n          mentions_everyone\n          content\n          sended_at\n          created_at\n      } \n    }\n    ";
                return [4 /*yield*/, fetch(endpoint, {
                        method: "POST",
                        headers: {
                            Authorization: "Bearer " + token,
                            'X-PROJECT-ID': projectId,
                            "Content-Type": "application/json",
                            Accept: "application/json"
                        },
                        body: JSON.stringify({
                            query: queries,
                            variables: {
                                projectId: projectId,
                                channelId: channelId,
                                id: messageId
                            }
                        })
                    })
                        .then(function (res) { return res.json(); })
                        .then(function (data) {
                        if (data.errors)
                            throw data.errors[0];
                        if (data.code)
                            throw data;
                        if (!data || !data.data.message)
                            return false;
                        return data.data.message;
                    })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
export var unreadCount = function (channelId) { return __awaiter(void 0, void 0, void 0, function () {
    var token, projectId, endpoint, queries;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                token = CoreManager.get("TOKEN");
                if (!token)
                    return [2 /*return*/, null];
                projectId = CoreManager.get("PROJECT_ID");
                if (!projectId)
                    return [2 /*return*/, null];
                endpoint = CoreManager.get("SERVER_URL") + "/graphql";
                queries = "\n        query mark ($projectId: String!, $channelId: String!) { \n          mark (projectId: $projectId, channelId:$channelId) {  \n              user_id,\n              message_id,\n              sort_id,  \n              unread\n        } \n      }\n  ";
                return [4 /*yield*/, fetch(endpoint, {
                        method: "POST",
                        headers: {
                            Authorization: "Bearer " + token,
                            'X-PROJECT-ID': projectId,
                            "Content-Type": "application/json",
                            Accept: "application/json"
                        },
                        body: JSON.stringify({
                            query: queries,
                            variables: {
                                projectId: projectId,
                                channelId: channelId
                            }
                        })
                    })
                        .then(function (res) { return res.json(); })
                        .then(function (data) {
                        if (data.errors)
                            throw data.errors[0];
                        if (data.code)
                            throw data;
                        if (!data || !data.data.mark)
                            return false;
                        return data.data.mark;
                    })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
//# sourceMappingURL=message.js.map