var DispatcherEvent = /** @class */ (function () {
    function DispatcherEvent() {
        this.callbacks = [];
    }
    DispatcherEvent.prototype.getCallbacks = function () {
        return this.callbacks;
    };
    DispatcherEvent.prototype.register = function (cb) {
        if (!this.callbacks.includes(cb)) {
            this.callbacks.push(cb);
        }
    };
    DispatcherEvent.prototype.unregister = function (cb) {
        var index = this.callbacks.indexOf(cb);
        if (index > -1) {
            this.callbacks.splice(index, 1);
        }
    };
    DispatcherEvent.prototype.execute = function (param1, param2, param3, param4, param5, param6) {
        if (this.callbacks.length > 0) {
            this.callbacks.slice(0).forEach(function (callback) {
                if (!param2)
                    callback(param1);
                else if (!param3)
                    callback(param1, param2);
                else if (!param4)
                    callback(param1, param2, param3);
                else if (!param5)
                    callback(param1, param2, param3, param4);
                else if (!param6)
                    callback(param1, param2, param3, param4, param5);
                else
                    callback(param1, param2, param3, param4, param5, param6);
            });
        }
    };
    return DispatcherEvent;
}());
var Dispatcher = /** @class */ (function () {
    function Dispatcher() {
        this.eventProvider = {};
    }
    Dispatcher.prototype.getProvider = function () {
        return this.eventProvider;
    };
    Dispatcher.prototype.dispatch = function (name, param1, param2, param3, param4, param5, param6) {
        var event = this.eventProvider[name];
        if (event) {
            event.execute(param1, param2, param3, param4, param5, param6);
        }
    };
    Dispatcher.prototype.on = function (name, callback) {
        var event = this.eventProvider[name];
        if (!event) {
            event = new DispatcherEvent();
            this.eventProvider[name] = event;
        }
        event.register(callback);
    };
    Dispatcher.prototype.off = function (name, callback) {
        var event = this.eventProvider[name];
        if (event) {
            event.unregister(callback);
            if (event.getCallbacks().length === 0) {
                delete this.eventProvider[name];
            }
        }
    };
    Dispatcher.prototype.offall = function (name) {
        var event = this.eventProvider[name];
        if (event) {
            delete this.eventProvider[name];
        }
    };
    return Dispatcher;
}());
export default Dispatcher;
//# sourceMappingURL=Dispatcher.js.map