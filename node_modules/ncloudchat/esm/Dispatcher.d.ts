/**
 * Copyright (c) NBASE CORP. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Class DispatcherEvent holds all dispatch events functionallities with callbacks.
 *
 * @class
 */
declare class DispatcherEvent {
    private callbacks;
    /**
     * Create a Dispatcher Event instance with an empty callback.
     *
     * @constructs
     */
    constructor();
    getCallbacks(): any[];
    register(cb: any): void;
    unregister(cb: any): void;
    execute(param1: any, param2: any, param3: any, param4: any, param5: any, param6: any): void;
}
declare type DispatcherProperty = {
    [key: string]: DispatcherEvent;
};
export default class Dispatcher {
    private eventProvider;
    constructor();
    getProvider(): DispatcherProperty;
    dispatch(name: string, param1: any, param2?: any, param3?: any, param4?: any, param5?: any, param6?: any): void;
    on(name: string, callback: any): void;
    off(name: string, callback: any): void;
    offall(name: string): void;
}
export {};
