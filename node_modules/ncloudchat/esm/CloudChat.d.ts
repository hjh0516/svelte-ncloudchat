import type { ChannelInput, MarkInput } from "./Type";
export default class NCloudChat {
    private dp;
    private socket;
    private connected;
    private connectedCount;
    constructor();
    clear(): void;
    initialize(projectId: string): void;
    getLang(): string;
    getUser(): any;
    setServerUrl(url: string): void;
    setSocketUrl(url: string): void;
    setProjectId(projectId: string): void;
    setToken(token: string): void;
    setUser(user: any): void;
    connect(user: any, userToken?: string): Promise<any>;
    mute(channel: string): Promise<any>;
    unmute(channel: string): Promise<any>;
    subscribe(channel: string, option?: any): Promise<any>;
    unsubscribe(channel: string): Promise<any>;
    translateMessage(channelId: string, source: string, target: string, message: string): Promise<any>;
    sendMessage(channel: string, opt: any): Promise<any>;
    sendImage(channelId: string, file: any): Promise<any>;
    updateMessage(channel: string, message_id: string, message: string): Promise<void>;
    deleteMessage(channel: string, message_id: string): Promise<void>;
    disconnect(): Promise<void>;
    isConnected(): boolean;
    bind(id: string, fn: any): Promise<void>;
    unbind(id: string, fn: any): Promise<void>;
    unbindall(id: string): Promise<void>;
    ObjectId(id: string): string;
    getFriendships(filter: any, sort?: any, option?: any): Promise<any>;
    getMemberBlocks(filter: any, sort?: any, option?: any): Promise<any>;
    getMembers(filter: any, sort?: any, option?: any): Promise<any>;
    getChannels(filter: any, sort?: any, option?: any): Promise<any>;
    requestFriend(friendId: string): Promise<any>;
    acceptFriend(friendId: string): Promise<any>;
    rejectFriend(friendId: string): Promise<any>;
    removeFriend(friendId: string): Promise<any>;
    countUnread(channelId: string): Promise<any>;
    getSubscription(channelId: string, id: string): Promise<any>;
    getChannel(channelId: string): Promise<any>;
    getMessage(channelId: string, messageId: string): Promise<any>;
    getMessages(filter: any, sort: any, option: any): Promise<any>;
    getSubscriptions(filter: any, sort: any, option: any): Promise<any>;
    createChannel(channel: ChannelInput): Promise<any>;
    updateChannel(channelId: string, channel: ChannelInput): Promise<any>;
    deleteChannel(channelId: string): Promise<any>;
    markRead(channelId: string, mark: MarkInput, option?: any): Promise<any>;
    addMembers(channelId: string, memberIds: any, options: any): Promise<any>;
    removeMembers(channelId: string, memberIds: any, options: any): Promise<any>;
    startTyping(channelId: string, threadId?: string): Promise<any>;
    stopTyping(channelId: string, threadId?: string): Promise<any>;
    banUser(channelId: string, memberId: string, options?: any): Promise<any>;
    unbanUser(channelId: string, memberId: string): Promise<any>;
}
