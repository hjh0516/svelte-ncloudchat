/**
 * Copyright (c) NBASE CORP. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import type { ChannelInput, MarkInput, PinInput } from "./Type";
/**
 * Class NCloudChat holds all the NCloudChat functionalities.
 *
 * @class
 */
export default class NCloudChat {
    private dp;
    private socket;
    private connected;
    private connectedCount;
    /**
     * Create a `NCloudChat` instance and a Dispatcher.
     *
     * @constructs
     */
    constructor(debug?: boolean);
    clear(): void;
    /**
     * Initialize a new `NCloudChat` instance of project and user.
     *
     * @function initialize
     * @param {string} projectId - The id of a project.
     */
    initialize(projectId: string): void;
    getLang(): string;
    getUser(): any;
    getProjectId(): any;
    setServerUrl(url: string): void;
    setSocketUrl(url: string): void;
    setProjectId(projectId: string): void;
    setToken(token: string): void;
    setUser(user: any): void;
    private inputValidation;
    /**
     * Create a connection between a socket and a client.
     *
     * @async connect
     * @param {any} user
     * @param {string} userToken
     * @returns
     */
    connect(user: any, userToken?: string): Promise<any>;
    /**
     * Mute channel notifications.
     *
     * @async
     * @function mute
     * @param {string} channel
     * @returns {Promise<any>}
     */
    mute(channel: string): Promise<any>;
    /**
     * Unmute channel notifications.
     *
     * @async
     * @function unmute
     * @param {string} channel
     * @returns {Promise<any>}
     */
    unmute(channel: string): Promise<any>;
    /**
     * Subscribe a channel.
     *
     * @async
     * @function subscibe
     * @param {string} channel - The id of a channel.
     * @param {any} option
     * @returns
     */
    subscribe(channel: string, option?: any): Promise<any>;
    /**
     * Unsubscribe from a channel.
     *
     * @async
     * @function unsubscribe
     * @param {string} channel - The id of a chennel
     * @returns {Promise<any>}
     */
    unsubscribe(channel: string): Promise<any>;
    /**
     * Translate a message from a souce language to a target language.
     *
     * @async
     * @function translateMessage
     * @param {string} channelId - The id of a channel.
     * @param {string} source - A source language.
     * @param {string} target - A target language.
     * @param {string} message - An message to be translated.
     * @returns {Promise<any>}
     */
    translateMessage(channelId: string, source: string, target: string, message: string): Promise<any>;
    /**
     * Send a message to a channel.
     *
     * @async
     * @function sendMessage
     * @param {string} channel - The id of a channel.
     * @param {any} opt
     * @returns {Promise<any>}
     */
    sendMessage(channel: string, opt: any): Promise<any>;
    /**
     * Send an express message to a channel.
     *
     * @async
     * @function sendExpressMessage
     * @param {string} channel - The id of a channel.
     * @param {any} opt
     * @returns {Promise<any>}
     */
    sendExpressMessage(channel: string, opt: any): Promise<any>;
    /**
     * Send an image to a channel. Only supports png, jpg, jpeg file types.
     *
     * @async
     * @function sendImage
     * @param {string} channelId - The id of a channel.
     * @param {any} file - An image file.
     * @returns {Promise<any>}
     */
    sendImage(channelId: string, file: any): Promise<any>;
    /**
     * Update a message.
     *
     * @todo
     * @async
     * @function updateMessage
     * @param {string} channel
     * @param {string} message_id
     * @param {string} message
     */
    updateMessage(channel: string, message_id: string, message: string): Promise<void>;
    /**
     * Delete a message.
     * @async
     * @function deleteMessage
     * @param {string} channel
     * @param {string} message_id
     */
    deleteMessage(channel: string, message_id: string): Promise<void>;
    /**
     * Disconnect from a socket.
     *
     * @async
     * @function disconnect
     * @returns
     */
    disconnect(): Promise<void>;
    /**
     * Check if a client is connected to a socket.
     *
     * @function isConnected
     * @returns {boolean}
     */
    isConnected(): boolean;
    isSocketConnected(): boolean;
    /**
     * Bind fn event handlers.
     *
     * @async
     * @function bind
     * @param {string} id
     * @param {any} fn
     */
    bind(id: string, fn: any): Promise<void>;
    /**
     * Unbind fn event handlers.
     *
     * @async
     * @function unbind
     * @param {string} id
     * @param {any} fn
     */
    unbind(id: string): Promise<void>;
    /**
     * Unbind all event handlers.
     * @param id
     */
    unbindall(id: string): Promise<void>;
    /**
     * Decodes a base-64 encoded string.
     *
     * @function ObjectId
     * @param {string} id - An encoded string to be decoded.
     * @returns {string} decoded string.
     */
    ObjectId(id: string): string;
    /**
     * Get current friends list of all status.
     *
     * @async
     * @function getFriendships
     * @param {string} filter - Field value for filter.
     * @param {string} sort - Field value for sorting.
     * @param {string} option - Optional option: ex) offset, per_page.
     * @returns {Promise<any>}
     */
    getFriendships(filter: any, sort?: any, option?: any): Promise<any>;
    /**
     * Get member blocks.
     *
     * @async
     * @function getBannedUsers
     * @param {string} filter - Field value for filter.
     * @param {string} sort - Field value for sorting.
     * @param {string} option - Optional option: ex) offset, per_page.
     * @returns {Promise<any>}
     */
    getBannedUsers(filter: any, sort?: any, option?: any): Promise<any>;
    /**
     * Get information data of the member.
     *
     * @async
     * @function getUsers
     * @param {string} filter - Field value for filter.
     * @param {string} sort - Field value for sorting.
     * @param {string} option - Optional option: ex) offset, per_page.
     * @returns {Promise<any>}
     */
    getUsers(filter: any, sort?: any, option?: any): Promise<any>;
    /**
     * Request a friendship to a user.
     *
     * @async
     * @function requestFriend
     * @param {string} friendId - An id of the friend to request.
     * @returns {Promise<any>}
     */
    requestFriend(friendId: string): Promise<any>;
    /**
     * Accept a friends request.
     *
     * @async
     * @function acceptFriend
     * @param {string} friendId - The id of the friend to accept the request.
     * @returns {Promise<any>}
     */
    acceptFriend(friendId: string): Promise<any>;
    /**
     * Reject a friend request.
     *
     * @async
     * @function rejectFriend
     * @param {string} friendId - An id of the friend to be rejected.
     * @returns {Promise<any>}
     */
    rejectFriend(friendId: string): Promise<any>;
    /**
     * Remove a friend.
     *
     * @async
     * @function removeFriend
     * @param {string} friendId - An id of the friend to be removed.
     * @returns {Promise<any>}
     */
    removeFriend(friendId: string): Promise<any>;
    /**
     * Get a count of unread messages of a channel.
     *
     * @async
     * @function countUnread
     * @param {string} channelId - The id of a channel.
     * @returns {Promise<any>}
     */
    countUnread(channelId: string): Promise<any>;
    /**
     * Get subscription data of the user.
     *
     * @async
     * @function getSubscription
     * @param {string} channelId - The id of a channel.
     * @param {string} id
     * @returns {Promise<any>}
     */
    getSubscription(channelId: string, id: string): Promise<any>;
    /**
     * Get data of a single channel from the endpoint.
     *
     * @async
     * @function getChannel
     * @param {string} channelId - An id of the channel.
     * @returns {Promise<any>} The data of the channel.
     */
    getChannel(channelId: string): Promise<any>;
    /**
     * Get data of multiple channels.
     *
     * @async
     * @function getChannels
     * @param {string} filter - Field value for filter.
     * @param {string} sort - Field value for sorting.
     * @param {string} option - Optional option: ex) offset, per_page.
     * @returns {Promise<any[]>} An array of data of all channels.
     */
    getChannels(filter: any, sort?: any, option?: any): Promise<any>;
    /**
     * @async
     * @function getMessage
     * @param {string} channelId - The id of a channel.
     * @param {string} messageId - The id of a message.
     * @returns {Promise<any>}
     */
    getMessage(channelId: string, messageId: string): Promise<any>;
    /**
     * Get data of the all messages.
     *
     * @async
     * @function getMessages
     * @param {string} filter - Field value for filter.
     * @param {string} sort - Field value for sorting.
     * @param {string} option - Optional option: ex) offset, per_page.
     * @returns {Promise<any>}
     */
    getMessages(filter: any, sort: any, option: any): Promise<any>;
    /**
     * Get a list of subscibed member of the channel.
     * @param {string} filter  - Field value for filter.
     * @param {string} sort - Field value for sorting.
     * @param {string} option - Optional option: ex) offset, per_page.
     * @returns {Promise<any>}
     */
    getSubscriptions(filter: any, sort: any, option: any): Promise<any>;
    /**
     * Create a new channel.
     *
     * @async
     * @function createChannel
     * @param {ChannelInput} channel - Configuration options of the new channel.
     * @returns {Promise<any>} The data of the newly created channel.
     */
    createChannel(channel: ChannelInput): Promise<any>;
    /**
     * Update channel options.
     *
     * @async
     * @function updateChannel
     * @param {string} channelId - An id of the channel.
     * @param {ChannelInput} channel - New options of the channel.
     * @returns {Promise<any>} The data of the updated channel.
     */
    updateChannel(channelId: string, channel: ChannelInput): Promise<any>;
    /**
     * Delete a channel.
     *
     * @async
     * @function deleteChannel
     * @param {string} channelId - An channel id.
     * @returns {Promise<any>}
     */
    deleteChannel(channelId: string): Promise<any>;
    /**
     * Update a subscription information, such as marking message read.
     *
     * @async
     * @function markRead
     * @param {string} channelId - The id of a channel.
     * @param {MarkInput} mark
     * @param {string} option
     * @returns {Promise<any>}
     */
    markRead(channelId: string, mark: MarkInput, option?: any): Promise<any>;
    /**
     * Add members to the private channel.
     *
     * @async
     * @function addUsers
     * @param {string} channelId - An private channel id.
     * @param {string[]} userIds - An array of member ids to be added.
     * @param {any} options
     * @returns {Promise<any>}
     */
    addUsers(channelId: string, userIds: any, options: any): Promise<any>;
    /**
     * Remove members from the private channel.
     *
     * @async
     * @function removeUsers
     * @param {string} channelId - An private channel id.
     * @param {string[]} userIds - An array of the member ids to be deleted.
     * @param {any} options
     * @returns {Promise<any>}
     */
    removeUsers(channelId: string, userIds: any, options: any): Promise<any>;
    /**
     * Emit "start typing" to a conneted socket.
     *
     * @async
     * @function startTyping
     * @param {string} channelId - The id of a channel that the typing is happening.
     * @param {string} threadId - The id of a thread that the typing is happening.
     * @returns {Promise<any>}
     */
    startTyping(channelId: string, threadId?: string): Promise<{
        channelId: string;
        threadId: string;
    }>;
    /**
     * Emit "stop typing" to a connected socket.
     *
     * @async
     * @function
     * @param {string} channelId - The id of a channel that the typing is stopped.
     * @param {string} threadId - The id of a thread that the typing is stopped.
     * @returns {Promise<any>}
     */
    stopTyping(channelId: string, threadId?: string): Promise<{
        channelId: string;
        threadId: string;
    }>;
    /**
     * Ban a member from a channel.
     *
     * @async
     * @function banUser
     * @param {string} channelId - The id of a channel.
     * @param {string} memberId - The id of a member.
     * @param {any} options
     * @returns {Promise<any>}
     */
    banUser(channelId: string, memberId: string, options?: any): Promise<any>;
    /**
     * Unban a member from a channel.
     *
     * @async
     * @function unbanUser
     * @param {string} channelId - The id of a channel.
     * @param {string} memberId - The id of a member.
     * @returns {Promise<any>}
     */
    unbanUser(channelId: string, memberId: string): Promise<any>;
    /**
     * Get data of a single pin from the endpoint.
     *
     * @async
     * @function getPin
     * @param {string} channelId - An id of the channel.
     * @param {string} id - An id of the pin.
     * @returns {Promise<any>} The data of the pin.
     */
    getPin(channelId: string, id: string): Promise<any>;
    /**
     * Get data of multiple pins.
     *
     * @async
     * @function getPins
     * @param {string} channelId - An id of the channel.
     * @param {string} filter - Field value for filter.
     * @param {string} sort - Field value for sorting.
     * @param {string} option - Optional option: ex) offset, per_page.
     * @returns {Promise<any[]>} An array of data of all channels.
     */
    getPins(channelId: string, filter: any, sort?: any, option?: any): Promise<any>;
    /**
     * Create a new pin.
     *
     * @async
     * @function createPin
     * @param {string} channelId - An id of the channel.
     * @param {PinInput} pin - Configuration options of the new pin.
     * @returns {Promise<any>} The data of the newly created pin.
     */
    createPin(channelId: string, pin: PinInput): Promise<any>;
    /**
     * Update pin options.
     *
     * @async
     * @function updatePin
     * @param {string} channelId - An id of the channel.
     * @param {PinInput} pin - New options of the pin.
     * @returns {Promise<any>} The data of the updated pin.
     */
    updatePin(pinId: string, channelId: string, pin: PinInput): Promise<any>;
    getServerUrl(): Promise<any>;
}
