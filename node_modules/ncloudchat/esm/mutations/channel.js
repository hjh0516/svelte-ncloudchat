var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import CoreManager from '../CoreManager';
import { ObjectId } from "../Util";
export var createChannel = function (channel) { return __awaiter(void 0, void 0, void 0, function () {
    var token, projectId, endpoint, query;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                token = CoreManager.get("TOKEN");
                projectId = CoreManager.get("PROJECT_ID");
                endpoint = CoreManager.get('SERVER_URL') + '/graphql';
                if (!channel.members)
                    channel.members = [];
                query = "\n    mutation (\n        $id: String,\n        $projectId: String!, \n        $name: String!, \n        $type: String!,\n        $uniqueId: String,\n        $translation: Boolean,\n        $push: Boolean,\n        $mutes: Boolean,\n        $linkUrl: String,\n        $imageUrl: String,\n        $members: [String]\n        ) {\n        createChannel(\n          input: { \n            id: $id,\n            projectId: $projectId, \n            name: $name, \n            type: $type,\n            uniqueId: $uniqueId,\n            translation:$translation,\n            push:$push,\n            mutes: $mutes,\n            linkUrl:$linkUrl,\n            imageUrl:$imageUrl\n            members: $members,\n            }\n        ) {\n          channel {\n            id\n            project_id\n            name\n            user_id { \n                id\n                name\n                profile\n                device_type\n                language\n            }\n            last_message {\n                message_id\n                sort_id\n                project_id\n                channel_id\n                message_type\n                mentions\n                mentions_everyone\n                has\n                sender {\n                    id\n                    name\n                    profile\n                }\n                admin {\n                    id\n                    name\n                    profile\n                }\n                content\n            }\n            unique_id\n            type\n            translation\n            members\n            push\n            link_url\n            image_url      \n            created_at\n            updated_at\n            }\n        }\n    }  \n    ";
                return [4 /*yield*/, fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + token,
                            'X-PROJECT-ID': projectId,
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            query: query,
                            variables: {
                                projectId: projectId,
                                name: channel.name,
                                type: channel.type,
                                uniqueId: channel.uniqueId,
                                translation: channel.translation,
                                push: channel.push,
                                mutes: channel.mutes,
                                linkUrl: channel.linkUrl,
                                imageUrl: channel.imageUrl,
                                disabled: channel.disabled,
                                members: channel.members
                            }
                        })
                    })
                        .then(function (res) { return res.json(); })
                        .then(function (data) {
                        if (data.errors)
                            throw data.errors[0];
                        if (data.code)
                            throw data;
                        if (data.data.createChannel.channel)
                            data.data.createChannel.channel.id = ObjectId(data.data.createChannel.channel.id);
                        return data.data.createChannel.channel;
                    })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
export var updateChannel = function (channelId, channel) { return __awaiter(void 0, void 0, void 0, function () {
    var token, projectId, endpoint, query;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                token = CoreManager.get("TOKEN");
                projectId = CoreManager.get("PROJECT_ID");
                endpoint = CoreManager.get('SERVER_URL') + '/graphql';
                if (!channel.members)
                    channel.members = [];
                query = "\n    mutation (\n        $projectId: String!, \n        $name: String!, \n        $type: String!,\n        $uniqueId: String,\n        $translation: Boolean,\n        $push: Boolean,\n        $linkUrl: String,\n        $imageUrl: String,\n        $id: ID!,\n        $members: [String]\n        ) {\n         updateChannel(\n          input: { \n            projectId: $projectId, \n            name: $name, \n            type: $type,\n            id: $id,\n            members: $members,\n            uniqueId: $uniqueId,\n            translation:$translation,\n            push:$push,\n            linkUrl:$linkUrl,\n            imageUrl:$imageUrl\n            }\n        ) {\n          channel {\n            id\n            project_id\n            name\n            user_id { \n                id\n                name\n                profile\n                device_type\n                language\n            }\n            last_message {\n                message_id\n                sort_id\n                project_id\n                channel_id\n                message_type\n                mentions\n                mentions_everyone\n                has\n                sender {\n                    id\n                    name\n                    profile\n                }\n                admin {\n                    id\n                    name\n                    profile\n                }\n                content\n            }\n            unique_id\n            type\n            translation\n            members\n            push\n            link_url\n            image_url      \n            created_at\n            updated_at\n            }\n        }\n    }  \n    ";
                return [4 /*yield*/, fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + token,
                            'X-PROJECT-ID': projectId,
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            query: query,
                            variables: {
                                projectId: projectId,
                                id: channelId,
                                name: channel.name,
                                type: channel.type,
                                uniqueId: channel.uniqueId,
                                translation: channel.translation,
                                push: channel.push,
                                mutes: channel.mutes,
                                linkUrl: channel.linkUrl,
                                imageUrl: channel.imageUrl,
                                disabled: channel.disabled,
                                members: channel.members
                            }
                        })
                    })
                        .then(function (res) { return res.json(); })
                        .then(function (data) {
                        if (data.errors)
                            throw data.errors[0];
                        if (data.code)
                            throw data;
                        if (data.data.updateChannel.channel)
                            data.data.updateChannel.channel.id = ObjectId(data.data.updateChannel.channel.id);
                        return data.data.updateChannel.channel;
                    })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
export var deleteChannel = function (channelId) { return __awaiter(void 0, void 0, void 0, function () {
    var token, projectId, endpoint, query;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                token = CoreManager.get("TOKEN");
                projectId = CoreManager.get("PROJECT_ID");
                endpoint = CoreManager.get('SERVER_URL') + '/graphql';
                query = "\n    mutation (\n        $projectId: String!, \n        $id: ID!\n        ) {\n         deleteChannel(\n          input: { \n            projectId: $projectId, \n            id: $id,\n            }\n        ) {\n          channel {\n            id\n            project_id\n            name\n            user_id { \n                id\n                name\n                profile\n                device_type\n                language\n            }\n            last_message {\n                message_id\n                sort_id\n                project_id\n                channel_id\n                message_type\n                mentions\n                mentions_everyone\n                has\n                sender {\n                    id\n                    name\n                    profile\n                }\n                admin {\n                    id\n                    name\n                    profile\n                }\n                content\n            }\n            unique_id\n            type\n            translation\n            members\n            push\n            link_url\n            image_url      \n            created_at\n            updated_at\n        }\n        }\n    }  \n    ";
                return [4 /*yield*/, fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + token,
                            'X-PROJECT-ID': projectId,
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            query: query,
                            variables: {
                                projectId: projectId,
                                id: channelId
                            }
                        })
                    })
                        .then(function (res) { return res.json(); })
                        .then(function (data) {
                        if (data.errors)
                            throw data.errors[0];
                        if (data.code)
                            throw data;
                        if (data.data.deleteChannel.channel)
                            data.data.deleteChannel.channel.id = ObjectId(data.data.deleteChannel.channel.id);
                        return data.data.deleteChannel.channel;
                    })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
export var addChannelMembers = function (channelId, memberIds, options) { return __awaiter(void 0, void 0, void 0, function () {
    var token, projectId, endpoint, query;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                token = CoreManager.get("TOKEN");
                projectId = CoreManager.get("PROJECT_ID");
                endpoint = CoreManager.get('SERVER_URL') + '/graphql';
                query = "\n    mutation ($projectId: String!, $channelId: String!, $memberIds: [String]!) {\n        addChannelMembers(input: {projectId: $projectId, channelId: $channelId, memberIds:$memberIds }) {\n            channel {\n                id\n                project_id\n                name\n                user_id { \n                    id\n                    name\n                    profile\n                    device_type\n                    language\n                }\n                unique_id\n                type\n                translation\n                members\n                push\n                link_url\n                image_url      \n                created_at\n                updated_at\n            }\n        }\n    }\n    ";
                return [4 /*yield*/, fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + token,
                            'X-PROJECT-ID': projectId,
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            query: query,
                            variables: {
                                projectId: projectId,
                                channelId: channelId,
                                memberIds: memberIds,
                                options: options
                            }
                        })
                    })
                        .then(function (res) { return res.json(); })
                        .then(function (data) {
                        if (data.errors)
                            throw data.errors[0];
                        if (data.code)
                            throw data;
                        if (data.data.addChannelMembers.channel)
                            data.data.addChannelMembers.channel.id = ObjectId(data.data.addChannelMembers.channel.id);
                        return data.data.addChannelMembers.channel;
                    })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
export var removeChannelMembers = function (channelId, memberIds) { return __awaiter(void 0, void 0, void 0, function () {
    var token, projectId, endpoint, query;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                token = CoreManager.get("TOKEN");
                projectId = CoreManager.get("PROJECT_ID");
                endpoint = CoreManager.get('SERVER_URL') + '/graphql';
                query = "\n    mutation ($projectId: String!, $channelId: String!, $memberIds: [String]!) {\n        removeChannelMembers(input: {projectId: $projectId, channelId: $channelId, memberIds:$memberIds }) {\n            channel {\n                id\n                project_id\n                name\n                user_id { \n                    id\n                    name\n                    profile\n                    device_type\n                    language\n                }\n                unique_id\n                type\n                translation\n                members\n                push\n                link_url\n                image_url      \n                created_at\n                updated_at\n            }\n        }\n    }\n    ";
                return [4 /*yield*/, fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + token,
                            'X-PROJECT-ID': projectId,
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            query: query,
                            variables: {
                                projectId: projectId,
                                channelId: channelId,
                                memberIds: memberIds
                            }
                        })
                    })
                        .then(function (res) { return res.json(); })
                        .then(function (data) {
                        if (data.errors)
                            throw data.errors[0];
                        if (data.code)
                            throw data;
                        if (data.data.removeChannelMembers.channel)
                            data.data.removeChannelMembers.channel.id = ObjectId(data.data.removeChannelMembers.channel.id);
                        return data.data.removeChannelMembers.channel;
                    })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
//# sourceMappingURL=channel.js.map