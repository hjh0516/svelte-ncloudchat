/**
 * Copyright (c) NBASE CORP. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import CoreManager from "../CoreManager";
import { fetchData } from "../Network";
import { loginQuery, createMemberBlockQuery, deleteMemberBlockQuery, } from "../graphql/member";
/**
 * Login a user
 *
 * @async
 * @function login
 * @param {string} user_id - The id of a user loggin in.
 * @param {string} name
 * @param {string} profile
 * @param {string} token
 * @returns {Promise<any>}
 */
export var login = function (user_id, name, profile, token, customField) {
    if (name === void 0) { name = ""; }
    if (profile === void 0) { profile = ""; }
    if (token === void 0) { token = ""; }
    if (customField === void 0) { customField = ""; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    CoreManager.set("TOKEN", token);
                    return [4 /*yield*/, fetchData("login", loginQuery, {
                            projectId: CoreManager.get("PROJECT_ID"),
                            userId: user_id,
                            name: name,
                            profile: profile,
                            token: token,
                            customField: customField
                        })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
};
/**
 * Create a member block followed by the getMemberBlockSchema.
 * The member block is to used to ban a member.
 *
 * @async
 * @function createMemberBlock
 * @param {string} channelId - The id of a channel.
 * @param {string} memberId - The id of a member.
 * @param {string} options
 * @returns {Promise<any>}
 */
export var createMemberBlock = function (channelId, memberId, options) {
    if (options === void 0) { options = ""; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetchData("createMemberBlock", createMemberBlockQuery, {
                        projectId: CoreManager.get("PROJECT_ID"),
                        channelId: channelId,
                        memberId: memberId,
                        options: options
                    })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
};
/**
 * Delete a member block.
 * This is used to unban a member from a channel.
 *
 * @async
 * @function deleteMemberBlock
 * @param {string} channelId - The id of a channel that the member is in.
 * @param {string} memberId - The id of a member to be deleted.
 * @returns {Promise<any>}
 */
export var deleteMemberBlock = function (channelId, memberId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetchData("deleteMemberBlock", deleteMemberBlockQuery, {
                    projectId: CoreManager.get("PROJECT_ID"),
                    channelId: channelId,
                    memberId: memberId
                })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
//# sourceMappingURL=member.js.map