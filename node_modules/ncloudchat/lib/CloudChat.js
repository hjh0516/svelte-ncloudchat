"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

require("core-js/modules/es6.regexp.replace.js");

require("core-js/modules/es6.array.slice.js");

require("core-js/modules/es6.function.name.js");

require("core-js/modules/es6.function.bind.js");

require("core-js/modules/es6.regexp.split.js");

require("core-js/modules/es6.array.map.js");

var _assign = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/assign"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _symbol = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol"));

var _iterator = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol/iterator"));

var _entries = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/entries"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));

var _socket = require("socket.io-client");

var _CoreManager = _interopRequireDefault(require("./CoreManager"));

var _Dispatcher = _interopRequireDefault(require("./Dispatcher"));

var _logger = require("./logger");

var _queries = require("./queries");

var _mutations = require("./mutations");

/**
 * Copyright (c) NBASE CORP. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __assign = void 0 && (void 0).__assign || function () {
  __assign = _assign["default"] || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = _promise["default"]))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof _symbol["default"] === "function" && (g[_iterator["default"]] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __values = void 0 && (void 0).__values || function (o) {
  var s = typeof _symbol["default"] === "function" && _iterator["default"],
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

var __read = void 0 && (void 0).__read || function (o, n) {
  var m = typeof _symbol["default"] === "function" && o[_iterator["default"]];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
};

/**
 * Class NCloudChat holds all the NCloudChat functionalities.
 *
 * @class
 */
var NCloudChat =
/** @class */
function () {
  /**
   * Create a `NCloudChat` instance and a Dispatcher.
   *
   * @constructs
   */
  function NCloudChat(debug) {
    if (debug === void 0) {
      debug = false;
    }

    this.socket = null;
    this.connected = false;
    this.connectedCount = 0;
    this.dp = new _Dispatcher["default"]();
    if (!debug) console.log = function () {};
  }

  NCloudChat.prototype.clear = function () {};
  /**
   * Initialize a new `NCloudChat` instance of project and user.
   *
   * @function initialize
   * @param {string} projectId - The id of a project.
   */


  NCloudChat.prototype.initialize = function (projectId) {
    this.setProjectId(projectId);
  };

  NCloudChat.prototype.getLang = function () {
    return navigator.language;
  };

  NCloudChat.prototype.getUser = function () {
    return _CoreManager["default"].get("USER");
  };

  NCloudChat.prototype.getProjectId = function () {
    return _CoreManager["default"].get("PROJECT_ID");
  };

  NCloudChat.prototype.setServerUrl = function (url) {
    if (!/^[hHtTpP]{4}(s)?(:\/\/)[a-zA-Z0-9\.\/-:]+/.test(url)) {
      throw Error("invalied url : (ex)http://domain.com, https://domain.com");
      return;
    }

    if (url.length > 1 && url.substring(url.length - 1) === "/") {
      url = url.substring(0, url.length - 1);
    }

    return _CoreManager["default"].set("SERVER_URL", url);
  };

  NCloudChat.prototype.setSocketUrl = function (url) {
    _CoreManager["default"].set("SOCKET_URL", url);
  };

  NCloudChat.prototype.setProjectId = function (projectId) {
    return _CoreManager["default"].set("PROJECT_ID", projectId);
  };

  NCloudChat.prototype.setToken = function (token) {
    return _CoreManager["default"].set("TOKEN", token);
  };

  NCloudChat.prototype.setUser = function (user) {
    _CoreManager["default"].set("USER", user);
  };

  NCloudChat.prototype.inputValidation = function (inputs) {
    var e_1, _a;

    if (!this.isConnected()) throw Error("You are not connected.");

    try {
      for (var _b = __values((0, _entries["default"])(inputs)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var _d = __read(_c.value, 2),
            key = _d[0],
            value = _d[1];

        if (!value) {
          var result = key.replace(/([A-Z])/g, " $1");
          var word = result.charAt(0).toUpperCase() + result.slice(1);
          throw Error("You need a(n) ".concat(word, "."));
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };
  /**
   * Create a connection between a socket and a client.
   *
   * @async connect
   * @param {any} user
   * @param {string} userToken
   * @returns
   */


  NCloudChat.prototype.connect = function (user, userToken) {
    if (userToken === void 0) {
      userToken = "";
    }

    return __awaiter(this, void 0, void 0, function () {
      var url, image, name, lang, customField, response, e_2, options;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isConnected()) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.disconnect()];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            url = _CoreManager["default"].get("SOCKET_URL") + "/cloudchat";
            if (!this.getProjectId()) throw Error("Project ID not found");
            if (!user.id) throw Error("UserID not found");
            image = user.profile;
            name = user.name;
            lang = this.getLang();
            customField = user.customField;
            _a.label = 3;

          case 3:
            _a.trys.push([3, 5,, 6]);

            return [4
            /*yield*/
            , (0, _mutations.login)(user.id, name, image, userToken, customField)];

          case 4:
            response = _a.sent();
            this.setUser({
              id: user.id,
              name: name,
              image: image,
              customField: customField
            });
            userToken = response["token"]; // parse token object

            return [3
            /*break*/
            , 6];

          case 5:
            e_2 = _a.sent();
            throw e_2;

          case 6:
            _CoreManager["default"].set("TOKEN", userToken);

            options = {
              transports: ["websocket"],
              reconnection: true,
              reconnectionAttempts: 10,
              reconnectionDelay: 2000,
              reconnectionDelayMax: 2000 * 100,
              randomizationFactor: 0.5,
              query: {
                project_id: this.getProjectId(),
                user_id: user.id,
                lang: lang,
                image: image,
                name: name,
                customField: customField,
                token: userToken
              }
            };
            this.socket = (0, _socket.io)(url, options);
            this.socket.on("connect", function (data) {
              _this.connectedCount++;
              _this.connected = true;
              (0, _logger.info)("Connected to ".concat(url, " with id: ").concat(_this.socket.id));

              _this.dp.dispatch("onConnected", data);
            });
            this.socket.on("unauthorized", function (data) {});
            this.socket.on("disconnect", function (reason) {
              _this.connected = false;
              (0, _logger.info)("Disconnected to ".concat(url, " with id: ").concat(_this.socket.id));

              _this.dp.dispatch("onDisconnected", reason);
            });
            this.socket.on("message", function (payload) {
              var message = JSON.parse(payload);

              _this.dp.dispatch("onMessageReceived", message.channel_id, message);
            });
            this.socket.on("event", function (payload) {
              var message = JSON.parse(payload);

              _this.dp.dispatch("onEventReceived", message.channel_id, message);
            });
            this.socket.on("start typing", function (payload) {
              var data = JSON.parse(payload);

              _this.dp.dispatch("onStartTyping", data);
            });
            this.socket.on("stop typing", function (payload) {
              var data = JSON.parse(payload);

              _this.dp.dispatch("onStopTyping", data);
            });
            this.socket.on("member joined", function (payload) {
              var data = JSON.parse(payload);

              _this.dp.dispatch("onMemberJoined", data);
            });
            this.socket.on("member leaved", function (payload) {
              var data = JSON.parse(payload);

              _this.dp.dispatch("onMemberLeaved", data);
            });
            this.socket.on("member updated", function (payload) {
              var data = JSON.parse(payload);

              _this.dp.dispatch("onMemberUpdated", data);
            });
            this.socket.on("message deleted", function (payload) {
              var data = JSON.parse(payload);

              _this.dp.dispatch("onMessageDeleted", data);
            });
            this.socket.on("message updated", function (payload) {
              var data = JSON.parse(payload);

              _this.dp.dispatch("onMessageUpdated", data);
            });
            this.socket.on("user banned", function (payload) {
              var data = JSON.parse(payload);

              _this.dp.dispatch("onUserBanned", data);
            });
            this.socket.on("user deleted", function (payload) {
              var data = JSON.parse(payload);

              _this.dp.dispatch("onUserDeleted", data);
            });
            this.socket.on("user updated", function (payload) {
              var data = JSON.parse(payload);

              _this.dp.dispatch("onUserUpdated", data);
            });
            this.socket.on("result", function (payload) {
              var message = JSON.parse(payload);

              _this.dp.dispatch("onResult", message);
            });
            this.socket.on("error", function (payload) {
              var message = JSON.parse(payload);

              _this.dp.dispatch("onErrorReceived", message);
            });
            return [2
            /*return*/
            , user];
        }
      });
    });
  };
  /**
   * Mute channel notifications.
   *
   * @async
   * @function mute
   * @param {string} channel
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.mute = function (channel) {
    return __awaiter(this, void 0, void 0, function () {
      var subscription, e_3;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channel
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.updateSubscription)(channel, null, (0, _stringify["default"])({
              mute: true
            }))];

          case 2:
            subscription = _a.sent();
            if (subscription["subscription"]) subscription["subscription"]["id"] = this.ObjectId(subscription["subscription"]["id"]);
            return [2
            /*return*/
            , subscription["subscription"]];

          case 3:
            e_3 = _a.sent();
            throw e_3;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Unmute channel notifications.
   *
   * @async
   * @function unmute
   * @param {string} channel
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.unmute = function (channel) {
    return __awaiter(this, void 0, void 0, function () {
      var subscription, e_4;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channel
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.updateSubscription)(channel, null, (0, _stringify["default"])({
              mute: false
            }))];

          case 2:
            subscription = _a.sent();
            if (subscription["subscription"]) subscription["subscription"]["id"] = this.ObjectId(subscription["subscription"]["id"]);
            return [2
            /*return*/
            , subscription["subscription"]];

          case 3:
            e_4 = _a.sent();
            throw e_4;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Subscribe a channel.
   *
   * @async
   * @function subscibe
   * @param {string} channel - The id of a channel.
   * @param {any} option
   * @returns
   */


  NCloudChat.prototype.subscribe = function (channel, option) {
    if (option === void 0) {
      option = null;
    }

    return __awaiter(this, void 0, void 0, function () {
      var subscription, e_5;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channel
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.createSubscription)(channel, (0, _stringify["default"])(option))];

          case 2:
            subscription = _a.sent();
            if (subscription["subscription"]) subscription["subscription"]["id"] = this.ObjectId(subscription["subscription"]["id"]);
            return [2
            /*return*/
            , subscription["subscription"]];

          case 3:
            e_5 = _a.sent();
            throw e_5;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Unsubscribe from a channel.
   *
   * @async
   * @function unsubscribe
   * @param {string} channel - The id of a chennel
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.unsubscribe = function (channel) {
    return __awaiter(this, void 0, void 0, function () {
      var subscription, e_6;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channel
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.deleteSubscription)(channel)];

          case 2:
            subscription = _a.sent();
            if (subscription["subscription"]) subscription["subscription"]["id"] = this.ObjectId(subscription["subscription"]["id"]);
            return [2
            /*return*/
            , subscription["subscription"]];

          case 3:
            e_6 = _a.sent();
            throw e_6;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Translate a message from a souce language to a target language.
   *
   * @async
   * @function translateMessage
   * @param {string} channelId - The id of a channel.
   * @param {string} source - A source language.
   * @param {string} target - A target language.
   * @param {string} message - An message to be translated.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.translateMessage = function (channelId, source, target, message) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_7;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              sourceLanguage: source,
              targetLanguage: target
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.translate)(channelId, source, target, message)];

          case 2:
            result = _a.sent();
            return [2
            /*return*/
            , result["translation"]];

          case 3:
            e_7 = _a.sent();

            if (e_7 instanceof Error) {
              throw Error(e_7.message);
            }

            return [3
            /*break*/
            , 4];

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Send a message to a channel.
   *
   * @async
   * @function sendMessage
   * @param {string} channel - The id of a channel.
   * @param {any} opt
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.sendMessage = function (channel, opt) {
    return __awaiter(this, void 0, void 0, function () {
      var data, result, e_8;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channel,
              message: opt.message
            });
            if (!opt.type) opt.type = "text";
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            data = __assign({
              channelId: channel
            }, opt);
            return [4
            /*yield*/
            , (0, _mutations.message)(data)];

          case 2:
            result = _a.sent();
            return [2
            /*return*/
            , result["message"]];

          case 3:
            e_8 = _a.sent();
            throw e_8;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Send an express message to a channel.
   *
   * @async
   * @function sendExpressMessage
   * @param {string} channel - The id of a channel.
   * @param {any} opt
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.sendExpressMessage = function (channel, opt) {
    return __awaiter(this, void 0, void 0, function () {
      var user, data;
      return __generator(this, function (_a) {
        if (!this.isConnected()) throw Error("You are not connected.");
        this.inputValidation({
          channelId: channel,
          message: opt.message
        });
        if (!opt.type) opt.type = "text";
        user = _CoreManager["default"].get("USER");
        if (!user) throw Error('user is null');

        try {
          data = __assign({
            channelId: channel,
            user: user
          }, opt);
          this.socket.emit("express message", data);
          return [2
          /*return*/
          , data];
        } catch (e) {
          throw e;
        }

        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Send an image to a channel. Only supports png, jpg, jpeg file types.
   *
   * @async
   * @function sendImage
   * @param {string} channelId - The id of a channel.
   * @param {any} file - An image file.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.sendImage = function (channelId, file) {
    return __awaiter(this, void 0, void 0, function () {
      var result;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId
            });
            return [4
            /*yield*/
            , (0, _mutations.upload)(channelId, file)];

          case 1:
            result = _a.sent();
            if (!result.status) throw Error(result.message);
            return [2
            /*return*/
            , result];
        }
      });
    });
  };
  /**
   * Update a message.
   *
   * @todo
   * @async
   * @function updateMessage
   * @param {string} channel
   * @param {string} message_id
   * @param {string} message
   */


  NCloudChat.prototype.updateMessage = function (channel, message_id, message) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Delete a message.
   * @async
   * @function deleteMessage
   * @param {string} channel
   * @param {string} message_id
   */


  NCloudChat.prototype.deleteMessage = function (channel, message_id) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Disconnect from a socket.
   *
   * @async
   * @function disconnect
   * @returns
   */


  NCloudChat.prototype.disconnect = function () {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        if (!this.isConnected()) return [2
        /*return*/
        ];
        this.socket.disconnect();

        _CoreManager["default"].set("TOKEN", "");

        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Check if a client is connected to a socket.
   *
   * @function isConnected
   * @returns {boolean}
   */


  NCloudChat.prototype.isConnected = function () {
    var token = _CoreManager["default"].get("TOKEN");

    if (token) return true;
    return false;
  };

  NCloudChat.prototype.isSocketConnected = function () {
    return this.connected ? true : false;
  };
  /**
   * Bind fn event handlers.
   *
   * @async
   * @function bind
   * @param {string} id
   * @param {any} fn
   */


  NCloudChat.prototype.bind = function (id, fn) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        this.dp.off(id);
        this.dp.on(id, fn);
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Unbind fn event handlers.
   *
   * @async
   * @function unbind
   * @param {string} id
   * @param {any} fn
   */


  NCloudChat.prototype.unbind = function (id) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        this.dp.off(id);
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Unbind all event handlers.
   * @param id
   */


  NCloudChat.prototype.unbindall = function (id) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        this.dp.offall(id);
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Decodes a base-64 encoded string.
   *
   * @function ObjectId
   * @param {string} id - An encoded string to be decoded.
   * @returns {string} decoded string.
   */


  NCloudChat.prototype.ObjectId = function (id) {
    if (!id) return "";
    return atob(id).split(":")[1];
  };
  /**
   * Get current friends list of all status.
   *
   * @async
   * @function getFriendships
   * @param {string} filter - Field value for filter.
   * @param {string} sort - Field value for sorting.
   * @param {string} option - Optional option: ex) offset, per_page.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.getFriendships = function (filter, sort, option) {
    if (sort === void 0) {
      sort = {};
    }

    if (option === void 0) {
      option = {};
    }

    return __awaiter(this, void 0, void 0, function () {
      var entries, friends, e_9;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({});
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getFriendships)((0, _stringify["default"])(filter), (0, _stringify["default"])(sort), (0, _stringify["default"])(option))];

          case 2:
            entries = _a.sent();

            if (entries) {
              friends = entries["edges"].map(function (item) {
                item.node.friend.id = _this.ObjectId(item.node.friend.id);
                item.node.user.id = _this.ObjectId(item.node.user.id);
                return __assign(__assign({}, item.node), {
                  id: item.node.id
                });
              });
              return [2
              /*return*/
              , friends];
            }

            return [2
            /*return*/
            , entries["edges"]];

          case 3:
            e_9 = _a.sent();
            throw e_9;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get member blocks.
   *
   * @async
   * @function getBannedUsers
   * @param {string} filter - Field value for filter.
   * @param {string} sort - Field value for sorting.
   * @param {string} option - Optional option: ex) offset, per_page.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.getBannedUsers = function (filter, sort, option) {
    if (sort === void 0) {
      sort = {};
    }

    if (option === void 0) {
      option = {};
    }

    return __awaiter(this, void 0, void 0, function () {
      var entries, members, e_10;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({});
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getMemberBlocks)((0, _stringify["default"])(filter), (0, _stringify["default"])(sort), (0, _stringify["default"])(option))];

          case 2:
            entries = _a.sent();

            if (entries["edges"]) {
              members = entries["edges"].map(function (item) {
                return __assign(__assign({}, item.node), {
                  id: _this.ObjectId(item.node.id)
                });
              });
              return [2
              /*return*/
              , members];
            }

            return [2
            /*return*/
            , entries["edges"]];

          case 3:
            e_10 = _a.sent();
            throw e_10;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get information data of the member.
   *
   * @async
   * @function getUsers
   * @param {string} filter - Field value for filter.
   * @param {string} sort - Field value for sorting.
   * @param {string} option - Optional option: ex) offset, per_page.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.getUsers = function (filter, sort, option) {
    if (sort === void 0) {
      sort = {};
    }

    if (option === void 0) {
      option = {};
    }

    return __awaiter(this, void 0, void 0, function () {
      var entries, members, e_11;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({});
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getMembers)((0, _stringify["default"])(filter), (0, _stringify["default"])(sort), (0, _stringify["default"])(option))];

          case 2:
            entries = _a.sent();

            if (entries) {
              members = entries['edges'].map(function (item) {
                return __assign(__assign({}, item.node), {
                  id: _this.ObjectId(item.node.id)
                });
              });
              return [2
              /*return*/
              , members];
            }

            return [3
            /*break*/
            , 4];

          case 3:
            e_11 = _a.sent();
            throw e_11;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Request a friendship to a user.
   *
   * @async
   * @function requestFriend
   * @param {string} friendId - An id of the friend to request.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.requestFriend = function (friendId) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_12;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              friendId: friendId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.requestFriend)(friendId)];

          case 2:
            result = _a.sent();

            if (result["friendship"]) {
              result["friendship"]["user"]["id"] = this.ObjectId(result["friendship"]["user"]["id"]);
              result["friendship"]["friend"]["id"] = this.ObjectId(result["friendship"]["friend"]["id"]);
            }

            return [2
            /*return*/
            , result["friendship"]];

          case 3:
            e_12 = _a.sent();
            throw e_12;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Accept a friends request.
   *
   * @async
   * @function acceptFriend
   * @param {string} friendId - The id of the friend to accept the request.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.acceptFriend = function (friendId) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_13;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              friendId: friendId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.acceptFriend)(friendId)];

          case 2:
            result = _a.sent();

            if (result["friendship"]) {
              result["friendship"]["user"]["id"] = this.ObjectId(result["friendship"]["user"]["id"]);
              result["friendship"]["friend"]["id"] = this.ObjectId(result["friendship"]["friend"]["id"]);
            }

            return [2
            /*return*/
            , result["friendship"]];

          case 3:
            e_13 = _a.sent();
            throw e_13;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Reject a friend request.
   *
   * @async
   * @function rejectFriend
   * @param {string} friendId - An id of the friend to be rejected.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.rejectFriend = function (friendId) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_14;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              friendId: friendId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.rejectFriend)(friendId)];

          case 2:
            result = _a.sent();

            if (result["friendship"]) {
              result["friendship"]["user"]["id"] = this.ObjectId(result["friendship"]["user"]["id"]);
              result["friendship"]["friend"]["id"] = this.ObjectId(result["friendship"]["friend"]["id"]);
            }

            return [2
            /*return*/
            , result["friendship"]];

          case 3:
            e_14 = _a.sent();
            throw e_14;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Remove a friend.
   *
   * @async
   * @function removeFriend
   * @param {string} friendId - An id of the friend to be removed.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.removeFriend = function (friendId) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_15;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              friendId: friendId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.removeFriend)(friendId)];

          case 2:
            result = _a.sent();

            if (result["friendship"]) {
              result["friendship"]["user"]["id"] = this.ObjectId(result["friendship"]["user"]["id"]);
              result["friendship"]["friend"]["id"] = this.ObjectId(result["friendship"]["friend"]["id"]);
            }

            return [2
            /*return*/
            , result["friendship"]];

          case 3:
            e_15 = _a.sent();
            throw e_15;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get a count of unread messages of a channel.
   *
   * @async
   * @function countUnread
   * @param {string} channelId - The id of a channel.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.countUnread = function (channelId) {
    return __awaiter(this, void 0, void 0, function () {
      var e_16;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.unreadCount)(channelId)];

          case 2:
            return [2
            /*return*/
            , _a.sent()];

          case 3:
            e_16 = _a.sent();
            throw e_16;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get subscription data of the user.
   *
   * @async
   * @function getSubscription
   * @param {string} channelId - The id of a channel.
   * @param {string} id
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.getSubscription = function (channelId, id) {
    return __awaiter(this, void 0, void 0, function () {
      var subscription, e_17;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              subscriptionId: id
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getSubscription)(channelId, id)];

          case 2:
            subscription = _a.sent();
            if (subscription) subscription["id"] = this.ObjectId(subscription["id"]);
            return [2
            /*return*/
            , subscription];

          case 3:
            e_17 = _a.sent();
            throw e_17;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get data of a single channel from the endpoint.
   *
   * @async
   * @function getChannel
   * @param {string} channelId - An id of the channel.
   * @returns {Promise<any>} The data of the channel.
   */


  NCloudChat.prototype.getChannel = function (channelId) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_18;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getChannel)(channelId)];

          case 2:
            result = _a.sent();

            if (result) {
              result.id = this.ObjectId(result.id);
              result["user_id"]["id"] = this.ObjectId(result["user_id"]["id"]);
            }

            return [2
            /*return*/
            , result];

          case 3:
            e_18 = _a.sent();
            throw e_18;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get data of multiple channels.
   *
   * @async
   * @function getChannels
   * @param {string} filter - Field value for filter.
   * @param {string} sort - Field value for sorting.
   * @param {string} option - Optional option: ex) offset, per_page.
   * @returns {Promise<any[]>} An array of data of all channels.
   */


  NCloudChat.prototype.getChannels = function (filter, sort, option) {
    if (sort === void 0) {
      sort = {};
    }

    if (option === void 0) {
      option = {};
    }

    return __awaiter(this, void 0, void 0, function () {
      var entries, channels, e_19;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({});
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getChannels)((0, _stringify["default"])(filter), (0, _stringify["default"])(sort), (0, _stringify["default"])(option))];

          case 2:
            entries = _a.sent();

            if (entries["edges"]) {
              channels = entries["edges"].map(function (item) {
                item.node.user_id.id = _this.ObjectId(item.node.user_id.id);
                return __assign(__assign({}, item.node), {
                  id: _this.ObjectId(item.node.id)
                });
              });
              return [2
              /*return*/
              , channels];
            }

            return [2
            /*return*/
            , entries["edges"]];

          case 3:
            e_19 = _a.sent();
            throw e_19;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * @async
   * @function getMessage
   * @param {string} channelId - The id of a channel.
   * @param {string} messageId - The id of a message.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.getMessage = function (channelId, messageId) {
    return __awaiter(this, void 0, void 0, function () {
      var entry, e_20;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              messageId: messageId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getMessage)(channelId, messageId)];

          case 2:
            entry = _a.sent();

            if (entry) {
              entry.id = this.ObjectId(entry.id);
              return [2
              /*return*/
              , entry];
            }

            return [2
            /*return*/
            , entry];

          case 3:
            e_20 = _a.sent();
            throw e_20;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get data of the all messages.
   *
   * @async
   * @function getMessages
   * @param {string} filter - Field value for filter.
   * @param {string} sort - Field value for sorting.
   * @param {string} option - Optional option: ex) offset, per_page.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.getMessages = function (filter, sort, option) {
    return __awaiter(this, void 0, void 0, function () {
      var entries, messages, e_21;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({});
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getMessages)((0, _stringify["default"])(filter), (0, _stringify["default"])(sort), (0, _stringify["default"])(option))];

          case 2:
            entries = _a.sent();

            if (entries["edges"]) {
              messages = entries["edges"].map(function (item) {
                return __assign(__assign({}, item.node), {
                  id: _this.ObjectId(item.node.id)
                });
              });
              return [2
              /*return*/
              , messages];
            }

            return [2
            /*return*/
            , entries["edges"]];

          case 3:
            e_21 = _a.sent();
            throw e_21;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get a list of subscibed member of the channel.
   * @param {string} filter  - Field value for filter.
   * @param {string} sort - Field value for sorting.
   * @param {string} option - Optional option: ex) offset, per_page.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.getSubscriptions = function (filter, sort, option) {
    return __awaiter(this, void 0, void 0, function () {
      var entries, subscribes, e_22;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({});
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getSubscriptions)((0, _stringify["default"])(filter), (0, _stringify["default"])(sort), (0, _stringify["default"])(option))];

          case 2:
            entries = _a.sent();

            if (entries["edges"]) {
              subscribes = entries["edges"].map(function (item) {
                return __assign(__assign({}, item.node), {
                  id: _this.ObjectId(item.node.id)
                });
              });
              return [2
              /*return*/
              , subscribes];
            }

            return [2
            /*return*/
            , entries["edges"]];

          case 3:
            e_22 = _a.sent();
            throw e_22;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Create a new channel.
   *
   * @async
   * @function createChannel
   * @param {ChannelInput} channel - Configuration options of the new channel.
   * @returns {Promise<any>} The data of the newly created channel.
   */


  NCloudChat.prototype.createChannel = function (channel) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_23;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelType: channel.type,
              channelName: channel.name
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.createChannel)(channel)];

          case 2:
            result = _a.sent();

            if (result["channel"]) {
              result["channel"]["id"] = this.ObjectId(result["channel"]["id"]);
              result["channel"]["user_id"]["id"] = this.ObjectId(result["channel"]["user_id"]["id"]);
            }

            return [2
            /*return*/
            , result["channel"]];

          case 3:
            e_23 = _a.sent();
            throw e_23;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Update channel options.
   *
   * @async
   * @function updateChannel
   * @param {string} channelId - An id of the channel.
   * @param {ChannelInput} channel - New options of the channel.
   * @returns {Promise<any>} The data of the updated channel.
   */


  NCloudChat.prototype.updateChannel = function (channelId, channel) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_24;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId
            });
            if (!channel.name) throw Error("You need at least a channel name or a type.");
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.updateChannel)(channelId, channel)];

          case 2:
            result = _a.sent();

            if (result["channel"]) {
              result["channel"]["id"] = this.ObjectId(result["channel"]["id"]);
              result["channel"]["user_id"]["id"] = this.ObjectId(result["channel"]["user_id"]["id"]);
            }

            return [2
            /*return*/
            , result["channel"]];

          case 3:
            e_24 = _a.sent();
            throw e_24;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Delete a channel.
   *
   * @async
   * @function deleteChannel
   * @param {string} channelId - An channel id.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.deleteChannel = function (channelId) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_25;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.deleteChannel)(channelId)];

          case 2:
            result = _a.sent();

            if (result["channel"]) {
              result["channel"]["id"] = this.ObjectId(result["channel"]["id"]);
              result["channel"]["user_id"]["id"] = this.ObjectId(result["channel"]["user_id"]["id"]);
            }

            return [2
            /*return*/
            , result["channel"]];

          case 3:
            e_25 = _a.sent();
            throw e_25;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Update a subscription information, such as marking message read.
   *
   * @async
   * @function markRead
   * @param {string} channelId - The id of a channel.
   * @param {MarkInput} mark
   * @param {string} option
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.markRead = function (channelId, mark, option) {
    if (option === void 0) {
      option = null;
    }

    return __awaiter(this, void 0, void 0, function () {
      var result, e_26;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              userId: mark.userId,
              messageId: mark.messageId,
              sortId: mark.sortId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.updateSubscription)(channelId, mark, (0, _stringify["default"])(option))];

          case 2:
            result = _a.sent();
            return [2
            /*return*/
            , result["subscription"]];

          case 3:
            e_26 = _a.sent();
            throw e_26;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Add members to the private channel.
   *
   * @async
   * @function addUsers
   * @param {string} channelId - An private channel id.
   * @param {string[]} userIds - An array of member ids to be added.
   * @param {any} options
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.addUsers = function (channelId, userIds, options) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_27;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              userIds: userIds
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.addChannelMembers)(channelId, userIds, options)];

          case 2:
            result = _a.sent();

            if (result["channel"]) {
              result["channel"]["id"] = this.ObjectId(result["channel"]["id"]);
              result["channel"]["user_id"]["id"] = this.ObjectId(result["channel"]["user_id"]["id"]);
            }

            return [2
            /*return*/
            , result["channel"]];

          case 3:
            e_27 = _a.sent();
            throw e_27;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Remove members from the private channel.
   *
   * @async
   * @function removeUsers
   * @param {string} channelId - An private channel id.
   * @param {string[]} userIds - An array of the member ids to be deleted.
   * @param {any} options
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.removeUsers = function (channelId, userIds, options) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_28;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              userIds: userIds
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.removeChannelMembers)(channelId, userIds)];

          case 2:
            result = _a.sent();

            if (result["channel"]) {
              result["channel"]["id"] = this.ObjectId(result["channel"]["id"]);
              result["channel"]["user_id"]["id"] = this.ObjectId(result["channel"]["user_id"]["id"]);
            }

            return [2
            /*return*/
            , result["channel"]];

          case 3:
            e_28 = _a.sent();
            throw e_28;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Emit "start typing" to a conneted socket.
   *
   * @async
   * @function startTyping
   * @param {string} channelId - The id of a channel that the typing is happening.
   * @param {string} threadId - The id of a thread that the typing is happening.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.startTyping = function (channelId, threadId) {
    if (threadId === void 0) {
      threadId = "";
    }

    return __awaiter(this, void 0, void 0, function () {
      var data;
      return __generator(this, function (_a) {
        if (!this.isConnected()) throw Error("You are not connected.");
        this.inputValidation({
          channelId: channelId,
          threadId: threadId
        });

        try {
          data = {
            channelId: channelId,
            threadId: threadId
          };
          this.socket.emit("start typing", data);
          return [2
          /*return*/
          , data];
        } catch (e) {
          throw e;
        }

        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Emit "stop typing" to a connected socket.
   *
   * @async
   * @function
   * @param {string} channelId - The id of a channel that the typing is stopped.
   * @param {string} threadId - The id of a thread that the typing is stopped.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.stopTyping = function (channelId, threadId) {
    if (threadId === void 0) {
      threadId = "";
    }

    return __awaiter(this, void 0, void 0, function () {
      var data;
      return __generator(this, function (_a) {
        if (!this.isConnected()) throw Error("You are not connected.");
        this.inputValidation({
          channelId: channelId,
          threadId: threadId
        });

        try {
          data = {
            channelId: channelId,
            threadId: threadId
          };
          this.socket.emit("stop typing", data);
          return [2
          /*return*/
          , data];
        } catch (e) {
          throw e;
        }

        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Ban a member from a channel.
   *
   * @async
   * @function banUser
   * @param {string} channelId - The id of a channel.
   * @param {string} memberId - The id of a member.
   * @param {any} options
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.banUser = function (channelId, memberId, options) {
    if (options === void 0) {
      options = {};
    }

    return __awaiter(this, void 0, void 0, function () {
      var memberBlock, e_29;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              memberId: memberId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.createMemberBlock)(channelId, memberId, (0, _stringify["default"])(options))];

          case 2:
            memberBlock = _a.sent();
            if (memberBlock["memberBlock"]) memberBlock["memberBlock"]["id"] = this.ObjectId(memberBlock["memberBlock"]["id"]);
            return [2
            /*return*/
            , memberBlock["memberBlock"]];

          case 3:
            e_29 = _a.sent();
            throw e_29;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Unban a member from a channel.
   *
   * @async
   * @function unbanUser
   * @param {string} channelId - The id of a channel.
   * @param {string} memberId - The id of a member.
   * @returns {Promise<any>}
   */


  NCloudChat.prototype.unbanUser = function (channelId, memberId) {
    return __awaiter(this, void 0, void 0, function () {
      var memberBlock, e_30;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              memberId: memberId
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.deleteMemberBlock)(channelId, memberId)];

          case 2:
            memberBlock = _a.sent();
            if (memberBlock["memberBlock"]) memberBlock["memberBlock"]["id"] = this.ObjectId(memberBlock["memberBlock"]["id"]);
            return [2
            /*return*/
            , memberBlock["memberBlock"]];

          case 3:
            e_30 = _a.sent();
            throw e_30;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get data of a single pin from the endpoint.
   *
   * @async
   * @function getPin
   * @param {string} channelId - An id of the channel.
   * @param {string} id - An id of the pin.
   * @returns {Promise<any>} The data of the pin.
   */


  NCloudChat.prototype.getPin = function (channelId, id) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_31;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              pinId: id
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getPin)(channelId, id)];

          case 2:
            result = _a.sent();

            if (result) {
              result.id = this.ObjectId(result.id);

              if (result["user_id"]) {
                result["user_id"]["id"] = this.ObjectId(result["user_id"]["id"]);
              }
            }

            return [2
            /*return*/
            , result];

          case 3:
            e_31 = _a.sent();
            throw e_31;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get data of multiple pins.
   *
   * @async
   * @function getPins
   * @param {string} channelId - An id of the channel.
   * @param {string} filter - Field value for filter.
   * @param {string} sort - Field value for sorting.
   * @param {string} option - Optional option: ex) offset, per_page.
   * @returns {Promise<any[]>} An array of data of all channels.
   */


  NCloudChat.prototype.getPins = function (channelId, filter, sort, option) {
    if (sort === void 0) {
      sort = {};
    }

    if (option === void 0) {
      option = {};
    }

    return __awaiter(this, void 0, void 0, function () {
      var entries, channels, e_32;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({});
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _queries.getPins)(channelId, (0, _stringify["default"])(filter), (0, _stringify["default"])(sort), (0, _stringify["default"])(option))];

          case 2:
            entries = _a.sent();

            if (entries["edges"]) {
              channels = entries["edges"].map(function (item) {
                var _a, _b;

                if (item.node.user_id) item.node.user_id.id = _this.ObjectId((_b = (_a = item.node) === null || _a === void 0 ? void 0 : _a.user_id) === null || _b === void 0 ? void 0 : _b.id);
                return __assign(__assign({}, item.node), {
                  id: _this.ObjectId(item.node.id)
                });
              });
              return [2
              /*return*/
              , channels];
            }

            return [2
            /*return*/
            , entries["edges"]];

          case 3:
            e_32 = _a.sent();
            throw e_32;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Create a new pin.
   *
   * @async
   * @function createPin
   * @param {string} channelId - An id of the channel.
   * @param {PinInput} pin - Configuration options of the new pin.
   * @returns {Promise<any>} The data of the newly created pin.
   */


  NCloudChat.prototype.createPin = function (channelId, pin) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_33;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              pinned: pin.pinned
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.createPin)(channelId, pin)];

          case 2:
            result = _a.sent();

            if (result["pin"]) {
              result["pin"]["id"] = this.ObjectId(result["pin"]["id"]);
              result["pin"]["user_id"]["id"] = this.ObjectId(result["pin"]["user_id"]["id"]);
            }

            return [2
            /*return*/
            , result["pin"]];

          case 3:
            e_33 = _a.sent();
            throw e_33;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Update pin options.
   *
   * @async
   * @function updatePin
   * @param {string} channelId - An id of the channel.
   * @param {PinInput} pin - New options of the pin.
   * @returns {Promise<any>} The data of the updated pin.
   */


  NCloudChat.prototype.updatePin = function (pinId, channelId, pin) {
    return __awaiter(this, void 0, void 0, function () {
      var result, e_34;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.inputValidation({
              channelId: channelId,
              pinned: pin.pinned
            });
            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4
            /*yield*/
            , (0, _mutations.updatePin)(pinId, channelId, pin)];

          case 2:
            result = _a.sent();

            if (result["pin"]) {
              result["pin"]["id"] = this.ObjectId(result["pin"]["id"]);
              result["pin"]["user_id"]["id"] = this.ObjectId(result["pin"]["user_id"]["id"]);
            }

            return [2
            /*return*/
            , result["pin"]];

          case 3:
            e_34 = _a.sent();
            throw e_34;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  NCloudChat.prototype.getServerUrl = function () {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        return [2
        /*return*/
        , _CoreManager["default"].get("SERVER_URL")];
      });
    });
  };

  return NCloudChat;
}();

var _default = NCloudChat;
exports["default"] = _default;