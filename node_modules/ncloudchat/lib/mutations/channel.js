"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.updateChannel = exports.removeChannelMembers = exports.deleteChannel = exports.createChannel = exports.addChannelMembers = void 0;

require("core-js/modules/es6.function.name.js");

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _symbol = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol"));

var _iterator = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/symbol/iterator"));

var _CoreManager = _interopRequireDefault(require("../CoreManager"));

var _channel = require("../graphql/channel");

var _Network = require("../Network");

/**
 * Copyright (c) NBASE CORP. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = _promise["default"]))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof _symbol["default"] === "function" && (g[_iterator["default"]] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

/**
 * Create a new channel.
 *
 * @async
 * @function createChannel
 * @param {ChannelInput} channel - Configuration options of the new channel.
 * @returns {Promise<any>} The data of the newly created channel.
 */
var createChannel = function createChannel(channel) {
  return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
      if (!channel.members) channel.members = [];
      return [2
      /*return*/
      , (0, _Network.fetchData)("createChannel", _channel.createChannelQuery, {
        projectId: _CoreManager["default"].get("PROJECT_ID"),
        name: channel.name,
        type: channel.type,
        uniqueId: channel.uniqueId,
        translation: channel.translation,
        push: channel.push,
        mutes: channel.mutes,
        customField: channel.customField,
        linkUrl: channel.linkUrl,
        imageUrl: channel.imageUrl,
        disabled: channel.disabled,
        members: channel.members
      })];
    });
  });
};
/**
 * Update channel options.
 *
 * @async
 * @function updateChannel
 * @param {string} channelId - An id of the channel.
 * @param {ChannelInput} channel - New options of the channel.
 * @returns {Promise<any>} The data of the updated channel.
 */


exports.createChannel = createChannel;

var updateChannel = function updateChannel(channelId, channel) {
  return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          if (!channel.members) channel.members = [];
          return [4
          /*yield*/
          , (0, _Network.fetchData)("updateChannel", _channel.updateChannelQuery, {
            projectId: _CoreManager["default"].get("PROJECT_ID"),
            id: channelId,
            name: channel.name,
            type: channel.type,
            uniqueId: channel.uniqueId,
            translation: channel.translation,
            push: channel.push,
            mutes: channel.mutes,
            linkUrl: channel.linkUrl,
            imageUrl: channel.imageUrl,
            disabled: channel.disabled,
            members: channel.members
          })];

        case 1:
          return [2
          /*return*/
          , _a.sent()];
      }
    });
  });
};
/**
 * Delete a channel.
 *
 * @async
 * @function deleteChannel
 * @param {string} channelId - An channel id.
 * @returns {Promise<any>}
 */


exports.updateChannel = updateChannel;

var deleteChannel = function deleteChannel(channelId) {
  return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , (0, _Network.fetchData)("deleteChannel", _channel.deleteChannelQuery, {
            projectId: _CoreManager["default"].get("PROJECT_ID"),
            id: channelId
          })];

        case 1:
          return [2
          /*return*/
          , _a.sent()];
      }
    });
  });
};
/**
 * Add members to the private channel.
 *
 * @async
 * @function addChannelMembers
 * @param {string} channelId - An private channel id.
 * @param {string[]} memberIds - An array of member ids to be added.
 * @param {any} options
 * @returns {Promise<any>}
 */


exports.deleteChannel = deleteChannel;

var addChannelMembers = function addChannelMembers(channelId, memberIds, options) {
  return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , (0, _Network.fetchData)("addChannelMembers", _channel.addChannelMembersQuery, {
            projectId: _CoreManager["default"].get("PROJECT_ID"),
            channelId: channelId,
            memberIds: memberIds,
            options: options
          })];

        case 1:
          return [2
          /*return*/
          , _a.sent()];
      }
    });
  });
};
/**
 * Remove members from the private channel.
 *
 * @async
 * @function removeChannelMembers
 * @param {string} channelId - An private channel id.
 * @param {string[]} memberIds - An array of the member ids to be deleted.
 * @returns {Promise<any>}
 */


exports.addChannelMembers = addChannelMembers;

var removeChannelMembers = function removeChannelMembers(channelId, memberIds) {
  return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , (0, _Network.fetchData)("removeChannelMembers", _channel.removeChannelMembersQuery, {
            projectId: _CoreManager["default"].get("PROJECT_ID"),
            channelId: channelId,
            memberIds: memberIds
          })];

        case 1:
          return [2
          /*return*/
          , _a.sent()];
      }
    });
  });
};

exports.removeChannelMembers = removeChannelMembers;